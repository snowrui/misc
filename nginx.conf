
#user  nobody;
worker_processes  1;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#error_log  logs/error.log  debug;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;


    # add by panrui
    proxy_connect_timeout   180;
    proxy_send_timeout      180;
    proxy_read_timeout      180;
    proxy_buffer_size       8k;
    proxy_buffers           8 64k;
    proxy_busy_buffers_size 128k;
    proxy_temp_file_write_size 128k;

    upstream dev {
        server   192.168.30.73:9201;
    }

    upstream dev02  {
        server   192.168.30.73:9202;
    }

    upstream dev03  {
        server   192.168.30.73:9203;
    }

	lua_shared_dict ip_data 10m;
    server {
        listen       8080;
        server_name  a.jindanlicai.com;

        access_log  logs/host.access.log  main;

        location / {

            content_by_lua '

                local ip_data = ngx.shared.ip_data

                local client_ip = ngx.req.get_headers()["X-Real-IP"]

                if client_ip == nil then
                    client_ip = ngx.req.get_headers()["x_forwarded_for"]
                end

                if client_ip == nil then
                    client_ip = ngx.var.remote_addr
                end

                local backend = ip_data:get(client_ip)

                if backend == "dev02" then
                    ngx.exec("@dev02")
                    return
                end

                if backend == "dev03" then
                    ngx.exec("@dev03")
                    return
                end

                ngx.exec("@dev")
                return
            ';
        }

        # xxx.com?set_ip?backend=dev02
        location /set_backend {
            default_type "text/html";

            content_by_lua '

                local ip_data = ngx.shared.ip_data

                local client_ip = ngx.req.get_headers()["X-Real-IP"]

                if client_ip == nil then
                    client_ip = ngx.req.get_headers()["x_forwarded_for"]
                end

                if client_ip == nil then
                    client_ip = ngx.var.remote_addr
                end

                local args = ngx.req.get_uri_args()
                if args ~= nil then
                    for key, val in pairs(args) do
                        if key == "backend" then
                            ip_data:set(client_ip, val)
                            ngx.print("ip" .. client_ip .. " backend " .. val)
                            return
                        end
                    end
                end

                ngx.print("error")
                    return
            ';
        }

        location /get_backend {
            default_type "text/html";

            content_by_lua '

                local ip_data = ngx.shared.ip_data

                local client_ip = ngx.req.get_headers()["X-Real-IP"]

                if client_ip == nil then
                    client_ip = ngx.req.get_headers()["x_forwarded_for"]
                end

                if client_ip == nil then
                    client_ip = ngx.var.remote_addr
                end

    	        local val = ip_data:get(client_ip)
                if val ~= nil then
        		    ngx.print(val)
	        	    return
                end

                return
            ';
        }

        location @dev{
            proxy_pass http://dev;
        }

        location @dev02{
           proxy_pass http://dev02;
        }

        location @dev03{
           proxy_pass http://dev03;
        }
    }
}
